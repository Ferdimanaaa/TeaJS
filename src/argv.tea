
class Argv:
	constructor (argv, opt, desc_text):
		@.___desc = {};
		@.pathdata = {};
		@.length = 0;
		if arguments.length:
			@.parse(argv, opt, desc_text)

	parse (argv, opt, desc_text):
		if desc_text:
			var re = /^[\ \t]*(\-(?:\-[\w\-]+)?\w)\,?\ *(\-\-[\w\-]+)?\ *(\<[^\>]+\>)?\s*(.*)$/mg,
				m, _opt = [];
			while m = re.exec(desc_text):
				_opt.push([m[1], m[2], m[3], m[4]]);
			if _opt.length:
				opt = opt ? opt.concat(_opt) : _opt;
			@.___desc._help_ = desc_text;

		if opt && opt.length:
			for i, o -> opt:
				if o.length > 2 && o[0] && o[1] && o[0][0] == '-' && o[1][0] == '-':
					@.add(o[0], o[1], o[3]||o[2]||'');

		var i = /node$/.test(argv[0]) ? 2 : 1;
		for i, name -> argv:
			if name[0] == '-':
				value = argv[i+1];
				if !value || value[0] == '-':
					value = true;
				else:
					i += 1;
				@[name] = value;
			else if !@['--file']:
				@['--file'] = name;
			else:
				@[@.length++] = name;
		return @.check();

	check():
		@.pathdata = Path.countPath(@['--file'], @['--path'], @['--out']);
		return @;

	get file():
		return @.pathdata.file;

	get dir:
		return @.pathdata.dir;

	get path:
		return @.pathdata.path;
	
	get outdir:
		return @.pathdata.outdir;

	get out:
		if @.pathdata.out:
			return @.pathdata.out;
		if /\.tea$/.test( @.pathdata.file ):
			return @.pathdata.file.replace(/\.tea$/, '.js');

	set file(file):
		@.pathdata = Path.countPath(file, @.pathdata.path, @.pathdata.outdir );
		return @.pathdata.file;

	set out(out):
		@.pathdata = Path.countPath(@.pathdata.file, @.pathdata.path, out);
		return @.pathdata.out;
		
	add (short, long, desc, fn):
		if short.substr(0,2) == '--':
			desc = long, long = short, short = null;
		var name = long.replace(/^-+/, '');
		if desc:
			@.___desc[short] = desc;
			@.___desc[long] = desc;

		if short && long && short != long:
			var self = @;
			@.__defineGetter__(short, function(){return self[long];});
			@.__defineSetter__(short, function(v){return self[long] = v;});
	
	showDesc (com):
		return @.___desc[com];

	showHelp():
		print( @.___desc._help_ );

	copy(extend):
		var argv = new Argv();
		for var i in @:
			if @[i] == null || i[0] == '_' && i[1] == '_':
				continue;
			argv[i] = @[i];
		if extend:
			for var i in extend:
				argv[i] = extend[i];
		argv.parent = argv.parent || argv;
		return argv;

module.exports = Argv;