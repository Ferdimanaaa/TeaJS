
Standard = require "./standard.js";

export versions = [];

export create(version, prepor):
	if not version in Standard:
		Err 5007, version;
	return new Standard(version, prepor);

export define(name, map):
	if versions.indexOf(name) == -1:
		versions.push( name )
		Standard[name] |= {};
	std_obj = compile( map, Standard[name] );
	return std_obj;

export compile(map, std_obj):
	for names, item in map:
		std = _compile(item);
		for name => names.split(' '):
			if !/^[A-Z]/.test(name):
				Err 5001, name;
			std_obj[name] = std;
	return std_obj;

function _compile(data):
	stds = {};
	stds.isStandard = true;
	if data as 'string' || data as 'function':
		stds['default'] = data;

	else if isArray(data):
		stds = [];
		stds.isStandard = 'list';
		for i -> data:
			stds.push( _compile(data[i]) );
	else:
		for cond, val in data:
			if val as 'object':
				val = _compile(val);
			stds[cond.replace(/\s*\n\s*/g, ' ')] = val;
	return stds;