#!/usr/bin/env node

require "./tea.js";

cmd_help = """
* <r:TeaJS:> version <g:VER:>
CMDHELP
""";

if !module.parent:
	(function(){

		Argv.parse( process.argv, cmd_help );

		if Argv['--help']:
			print Argv.help();
			Tea.exit();

		if Argv['--tab']:
			Tea.tabsize( parseInt(Argv['--tab']) );

		if Argv['--define']:
			files = checkPath( Argv['--define'], Argv['--path'] );
			if !files:
				print '* <g:Cant find define file as <r:"'+Argv['--define']+'":>!!:>';
				Tea.exit();
			Tea.prep.load( files );

		if Argv['--eval'] && Argv['--eval'].length:
			ctx = Tea.context(null, Argv['--eval']);
			nextStep(ctx);
			return;

		if Argv['--file'] || Argv['--path']:
			checkDefine( Argv['--path'] || Fp.dirName(Argv['--file']) );
			files = checkPath( Argv['--file'], Argv['--path'] );
			for file => files:
				ctx = Tea.context(file);
				nextStep(ctx);
			return;

		Argv.pipe(function(chunk){
			if !chunk:
				print '\n* Are you <g:NongShaLei??????:>\n';
				print Argv.help();
				Tea.exit();
			ctx = Tea.context(null, chunk);
			nextStep(ctx);
			return;
		});
	})();
	
	function nextStep(ctx):
		Tea.log('* <g:Load:>  : '+(ctx.fileName||'by stdin'));

		if Argv['--token']:
			print ctx.fileName;
			print ctx.source;
		if Argv['--ast']:
			print ctx.fileName;
			print ctx.AST;
		if Argv['--ast'] || Argv['--token']:
			return;

		if Argv['--out']:
			out = checkOut(Argv['--out'], Argv['--path'], ctx.fileName);
			ctx.output(out, Argv['--map']);
			Tea.log('* <g:Output:>: '+out);

		if Argv['--test']:
			runTest(ctx);
		else if !Argv['--out']:
			console.log( ctx.output() );

	function runTest(ctx, param):
		child_process = require "child_process";
		out = ctx.outfile;
		cmds = [];
		if !out:
			temp_file = ctx.fileName.replace(/\.(js|tea)$/ig, '')+'.tmp.js';
			ctx.output( temp_file );
			cmds.push( 'node', temp_file );
		else:
			cmds.push( 'node', out );
		if param as 'string':
			cmds = cmds.concat( param.split(' ') );
		Tea.log('* <r:Test:>  : '+cmds.join(' '));
		child_process.exec( cmds.join(' '), {maxBuffer: 50000*1024}, function(err, stdout, stderr):
			text = stdout+''+stderr;
			print text.replace(/^/mg, '\t  | ');
			if temp_file:
				child_process.execSync('rm -rf '+temp_file);
			Tea.exit();
		);

	function checkPath(file, path, out):
		if path:
			path = Fp.resolve(path);
		if file:
			files = []
			file_list = [];
			if isArray(file):
				for i -> file:
					file_list.push( Fp.resolve(path, file[i]) );
			else:
				file_list.push( Fp.resolve(path, file) );
			for i, file -> file_list:
				if /[^\w\/]/.test(file) || Fp.isDir(file):
					temp = Fp.checkFiles(file, null, ['index.tea']);
					files.push.apply( files, temp );
				else if Fp.isFile(file):
					files.push(file);
				else if Fp.isFile( file + '.tea' ):
					files.push(file + '.tea');
		else:
			files = Fp.scanFile(path, /\.tea/, 100);
		for i, file <- files:
			if /(__define\.tea)$/.test(file):
				files.splice(i, 1);
		return files;

	function checkOut(out, path, file):			
		out = Fp.resolve(out, true);
		if Fp.isDir(out) || /\/$/.test(out):
			if path:
				out = Fp.join(out, Fp.relative(Fp.resolve(path), Fp.resolve(file)));
			else:
				out = Fp.join(out, Fp.baseName(file));
			out = out.replace(/\.tea$/, checkExt());
		return out;

	function checkExt():
		switch Argv['--std']:
			case 'es5', 'es6': default:
				return '.js';

	function checkDefine( path ):
		file = Fp.join( Fp.resolve(path), '__define.tea' );
		if Fp.isFile(file):
			Tea.prep.load( file );
