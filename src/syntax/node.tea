
var NodeBase = require "./base.js";

class Node extends NodeBase:

	constructor(type):
		@.type   = type;
		@.length = 0;
		@.isnode = true;
		@._scope = null;

		if arguments.length > 1:
			@.add.apply( @, Array.prototype.slice.call(arguments, 1) );

	get text():
		tokens = @.tokens;
		texts = [];
		for tk => tokens:
			texts.push(tk.text);
		return texts.join('');

	add ():
		for i, node -> arguments:
			if !node:
				continue;
			if node.isnode || node.istoken:
				node.parent = @;
				@[ @.length++ ] = node;
			else if isArray(node):
				@.add.apply(@, node);
			else:
				Err 'Node can only add object of "Node" or "Code" and "NaN" types ! >> '+node;
		return @;

	tokens (index):
		var tokens = [];
		for i -> @:
			if @[i].istoken:
				tokens.push(@[i]);
			else:
				tokens.push.apply(tokens, @[i].tokens());
			if index === 0:
				return tokens[0];
		if typeof index == 'number':
			return tokens[ index < 0 ? tokens.length + index : index ];
		return tokens;

	clone ():
		var node = new Node(@.type);
		for i -> @:
			node[node.length++] = @[i];
		node.parent = @.parent;
		return node;

module.exports = Node;