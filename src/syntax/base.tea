var Scope = require "./scope.js";

class NodeBase:
	
	var nodemap = require("./map.js").node;

	get root:
		var root = @;
		while root.parent:
			root = root.parent;
		return root;

	get offsetParent:
		var parent = @.parent;
		while parent && (['ArgumentsDecl', 'NodeStam', 'CommaExpr'].indexOf(parent.type) != -1 ):
			parent = parent.parent;
		return parent;

	get scopeParent:
		if @.type == 'Root':
			return @;
		var parent = @.parent;
		while parent && !parent.is('ScopeNode'):
			parent = parent.parent;
		return parent;

	get parent:
		return @._parent;

	set parent(parent):
		@._scope = null;
		return @._parent = parent;

	get nextSibling:
		var index = @.index;
		if index >= 0:
			return @.parent[ index+1 ];
			
	get prevSibling:
		var index = @.index;
		if index - 1 >= 0:
			return @.parent[ index - 1 ];

	get index:
		return !@.parent ? -1 : Array.prototype.indexOf.call(@.parent, @);

	get scope:
		if !@._scope:
			if @.parent:
				@._scope = @.parent.scope;
			else:
				@._scope = new Scope(@);
		return @._scope;

	set scope(scope):
		return @._scope = scope;

	get offsetScope():
		var scope = @.scope;
		if scope.isLetScope:
			return scope.parent;
		return scope;

	queryParent( type ):
		var p = @.parent;
		while p && p.type != type:
			p = p.parent;
		return p;

	is():
		list = arguments.length > 1 ? arguments : arguments[0].split(' '),
		types = @.types || [@.type];
		for i -> list:
			if types.indexOf(list[i]) != -1:
				return list[i];
			else if nodemap.test(types[0], list[i]):
				return list[i];
		return false;

	eq():
		if @.isnode:
			if @.length == 1 && @[0].istoken:
				text = @[0].text;
			else:
				return false;
		else:
			text = @.text;
		list = arguments.length > 1 ? arguments : arguments[0].split(' ');
		for i -> list:
			if list[i] == text:
				return text;
		return false;

module.exports = NodeBase;