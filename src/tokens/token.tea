var Node = require "../syntax/node.js";
var NodeBase = Node.NodeBase;

class Token extends NodeBase:
	
	var isNode = Node.isNode;
	
	constructor(text, types, indent, location):
		@.text         = text;
		if types:
			@.types    = Hash.slice(types);
		if indent != null:
			@.indent       = indent;
		@.location     = location || null;
		@.istoken      = true;
	
	get types:
		return @._types;

	set types(types):
		@.type = types[0];
		@._types = types;
		return @._types;

	set indent(num):
		@._indent       = num ? -1;
		var i = @.types.indexOf('LineHead');
		if @._indent >= 0:
			@.types.push('LineHead') <- i == -1;
		else if i >= 0:
			@.types.splice(i, 1);

	get indent:
		return @._indent;

	get start:
		return @.location.start;

	get end:
		return @.location.end;

	is():
		var list = arguments.length > 1 ? arguments : arguments[0].split(' '),
			types = @.types;
		for i -> list:
			if types.indexOf(list[i]) != -1:
				return list[i];
			else if isNode(types[0], list[i]):
				return list[i];
		return false;

	eq():
		var list = arguments.length > 1 ? arguments : arguments[0].split(' '),
			text = @.text;
		for i -> list:
			if list[i] == text:
				return text;
		return false;

	clone(text):
		var token = new Token(text || @.text, @.types, @.indent, @.location);
		token.parent = @.parent;
		return token;

module.exports = Token;