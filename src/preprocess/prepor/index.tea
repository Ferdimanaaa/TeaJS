
class Prepor:
	Macro   = require "./macro.js";
	Sugar   = require "./sugar.js";
	Grammar = require "../../core/grammar";
	Template = require "../template.js";

	constructor():
		@.standards  = {};
		@.expr = {};
		@.stam  = {};
		@.sugar      = {};
		@.macro      = {};
		@.map        = {};

	extend():
		for porc => arguments:
			if !porc:
				continue;
			for type, data in porc:
				for name, value in data:
					@[type][name] = value;

	add(type, name, args, body, location):
		switch type:
			case 'sugar', 'expr', 'stam':
				@.map[name] = type;
				@.standards[name] = @[type][name] = new Sugar(type, name, args, body, location);

			case 'macro':
				@.map[name] = 'macro';
				@.macro[name] = new Macro(name, args, body, location, @);

	undef():
		for name => arguments:
			name = name.trim();
			delete @.map[name];
			delete @.macro[name];

	check( name, type, src, parser):
		mark = name.match(/^(#*)/)[1];
		if mark:
			name = name.substr(mark.length);
		if _type = @.map[name]:
			if type && _type != type:
				return false;
			tar = @[_type][name];
			if src:
				if _type == 'macro':
					return checkMarco(@, tar, src, mark);
				else:
					return tar.parse(parser, src);
			return tar;

	function checkMarco(prepor, macro, src, mark):
		a = src.index;
		if macro.args:
			if not params = checkParams(prepor, src.next()):
				return false;
			value = macro.parse( params );
		else:
			value = macro.parse();

		b = src.index;
		src.delete(a, b);
		if value:
			value = SText.clip(value);
			if mark == '#':
				value = '"'+value.replace(/(^|[^\\])"/g, '$1\\"')+'"';
			src.insert(a+1, value);
		return true;

	function checkParams(prepor, src, type):
		a = src.index;
		node = Grammar.parser( type || 'Params', src, null, prepor);
		if node && node.type == 'ParamsExpr':
			b = src.index;
			text = src.join(a, b).trim();
			if text[0] == '(' && SText.indexPair(text, '(', ')', 0)[1] == text.length-1:
				text = text.slice(1, -1)
			params = SText.split(text, ',', true);
			return params;

	@::isPrepor = true;


module.exports = Prepor;