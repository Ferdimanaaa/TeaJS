var Prep   = require "./preprocess";
var Tokens = require "./tokens";
var Syntax = require "./syntax";
var ReWriter = require "./rewriter";

class Context:

	var def_pre_processor;

	constructor(argv, extend):
		if @.constructor != Context:
			return new Context(argv, extend);
		@.argv          = argv;
		@.preProcessor  = Prep.new( def_pre_processor );
		if extend:
			@.extends(  argv && argv['preprocess'], extend);
	reinit():
		@._source   = null;
		@._ast      = null;
		@._rewriter = null;

	extends():
		for i, item -> arguments:
			if item:
				@.preProcessor.extends( item.preProcessor || item );
		@.reinit();

	get source:
		if !@._source:
			if @.argv.source:
				@._source = @.argv.source;
			else if @.argv.text || @.argv.file:
				@._source = Prep.source(@.argv.text, @.argv.file, @.preProcessor);
		return @._source;

	get fileName:
		return @.source.fileName;

	get sourceText:
		return @.source.source;

	get ast:
		if !@._ast:
			@._ast = Syntax.parse(@.source, @.preProcessor);
		return @._ast;

	get scope:
		return @.ast.scope;

	get rewriter:
		if !@._rewriter:
			@._rewriter = ReWriter.read(@.ast, @.preProcessor);
		return @._rewriter;

	get text:
		return @.writer.text;

	get sourcemap:
		map = ReWriter.sourceMap();
		map.file = @.argv.out || '';
		map.sourceRoot = @.fileName;
		map.parse( @.rewriter, @.source );
		return map;

	get requires:
		if !@._rewriter:
			@._rewriter = ReWriter.read(@.ast, @.preProcessor);
		return @.scope.requires;

	echo ( output, outmap ):
		output |= @.argv && @.argv.out;
		outmap && sourcemap = @.sourcemap;
		if @.requires.length:
			shell_comm = '';
			requires = loadRequiresList( @.requires, {} );
			text = Prep.template.joinRequire( requires, @.rewriter );
			if sourcemap:
				for item => requires:
					sourcemap.parse( item[2], item[1].source );
			text = text.replace(/\n\s*(\#\!.*\n)/g, function($0, $1){
				shell_comm = $1;
				return '\n';
			});
			text = shell_comm+text;
		else:
			text = @.rewriter.toText();
		
		if sourcemap:
			if not outmap as 'string':
				outmap = output.replace(/\.\w+$/, '.map');
			Text.writeFile( sourcemap.text, outmap );
			text += '\n//# sourceMappingURL='+Path.relative(Path.dirname(output), outmap);

		Text.writeFile( text, output );


	static defaultPreprocessor():
		if !def_pre_processor:
			def_pre_processor = new Prep.new();
		for i, item -> arguments:
			if item:
				if item as 'string':
					def_pre_processor.extends( Prep.parseByFile(item) );
				else:
					def_pre_processor.extends( item );

	function loadRequiresList( list, cache ):
		for file, key in list:
			if file == 'length' || file in cache:
				continue;
			tea_log '** require file: '+file;
			var ctx = new Context({file: file});
			cache[file] = [key, ctx, ctx.rewriter];
			if ctx.requires.length:
				loadRequiresList( ctx.requires, cache );
		return cache;

module.exports = Context;