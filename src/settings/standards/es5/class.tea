
Card = require "../../../core/card";

module.exports = function(node, param):
	handle = @.handle;
	vars   = handle.variables;
	scope  = node.scope;
	
	if node[i = 1].type == 'NameExpr':
		name = node[i++];
	else if node.parent.type == 'AssignExpr' && node.parent[0].type == 'VariableExpr':
		name = node.parent[0][0];
	else:
		name = '_Class_';
	if node[i].type == 'ExtendsExpr':
		extend = node[i++];
		scope.super = 'this.__super__';
	else:
		scope.super = 'Object.prototype';

	name = vars.name = scope.name = name.text || name;
	block = @.read( node[i], false, true )[1];

	start = 0
	for i = 0 -> block:
		if block[i].type:
			if /VarStam|LetStam|AssignExpr|RequireExpr|COMMENT|STRING/.test(block[i].type):
				continue;
		start = i;
		break;

	if extend:
		block.insert(start, ClassExtends.call(@, scope, extend));
	block.insert(start,  ClassConstructor.call(@, scope) );

	block.add( new Card( 'Line', 'return '+name) );

	init_block =  @.pattern( '(function(){@})()', block, 'ClassInit');

	if node.parent.type == 'AssignExpr':
		return init_block;
	return @.pattern('var @name = @', init_block, 'ClassDecl');

function ClassConstructor(scope):
	cache       = scope.cache;
	constructor = cache.constructors && cache.constructors[0];
	propertys   = cache.propertys;
	if constructor:
		argu  = @.read(constructor[1]);
		if propertys:
			constructor.scope.cachePush('head', propertys);
		block = @.read(constructor[2], false, true)[1];
	else:
		argu = '()';
		block = new Card('Block', propertys);
	return @.pattern('function @name@[0]{@[1]}', [argu, block], 'ConstructorExpr');

function ClassExtends(scope, node):
	list = [];
	params = node[1];
	list.push @.pattern('@name.prototype = Object.create(@[0].prototype)', params, 'Line');
	list.push @.pattern('@name.prototype.__super__ = @[0].prototype', params, 'Line');
	list.push @.pattern('@name.prototype.constructor = @name', params, 'Line');
	if params.length > 1:
		list.push @.pattern('
		 		@name.__extends__ = function(){
		 			for(var i=0, args = arguments; i<args.length; i++){
		 				var _super = args[i].prototype;
		 				for (var name in _super){
							if (_super[name].hasOwnProperty(name)){
								this.prototype[name] = _super[name];
							}
		 				}
		 			}
		 		}', params, 'Line');
		list.push @.pattern('@name.__extends__(#COMMA(1))', params);
	return list;