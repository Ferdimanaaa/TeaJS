
Card = require "../../../core/card";

module.exports = function(node, param):
	scope  = node.scope.root;
	file   = node[0].location.fileName;
	params = parseRequireParams.call(@, node[1], file);
	list   = [];
	for i, data -> params:
		if data.file:
			scope.cachePush('require', data.file);
		card = new Card('RequireExpr', node[0], '(', data.card, ')' );
		list.push(card);

	if list.length == 1:
		return list[0];
	if node.parent.is('BlockNode', 'Root'):
		for i -> list:
			list[i] = new Card('VarExpr', 'var ', getName(list[i][2].text), ' = ', list[i]);
	else if node.parent.is('JsonAssignExpr'):
		for i -> list:
			list[i] = new Card('AssignExpr', getName(list[i][2].text), ' : ', list[i]);	
		return @.pattern('{#COMMA(@)}', list, 'JsonExpr');
	else:
		return @.pattern('[#COMMA(@)]', list, 'ArrayExpr');
	return list;

function parseRequireParams(node, from):
	list = [];
	dir  = Fp && Fp.dirName(from) || from.split('/').slice(0, -1).join('/');
	for i, item -> node:
		if Fp && item.is('STRING'):
			text = item.text;
			if /\//.test(text):
				file = Fp.resolve(dir, text);

				if Fp.isFile(file):
					list.push( makeData(text, file, dir, item) );
					continue;

				if !/\.js$|\.tea$/.test(file):
					if Fp.isFile(file+'.js'):
						list.push( makeData(text, file+'.js', dir, item) );
						continue;
					if Fp.isFile(file+'.tea'):
						list.push( makeData(text, file+'.tea', dir, item) );
						continue;

				if /\.js$/.test(file):
					if Fp.isFile( file.replace(/\.js/, '.tea') ):
						list.push( makeData(text, file.replace(/\.js/, '.tea'), dir, item) );
						continue;

				if /\.tea$/.test(file):
					if Fp.isFile( file.replace(/\.tea/, '.js') ):
						list.push( makeData(text, file.replace(/\.tea/, '.js'), dir, item) );
						continue;

				files = Fp.checkFiles(text, dir, ['index.js', 'index.tea']);
				if !files.error:
					for file => files:
						if file == from:
							continue;
						list.push( makeData(text, file, dir, item) );
					continue;
			list.push( { card: item, file:''} );
		else:
			list.push( { card: @.read(item), file:''} );
	return list;

function makeData(text, file, dir, token):
	filename = Fp.relative(dir, file);
	if /\/index\.(js|tea)$/.test(filename) && !/\/index\.(js|tea)$/.test(text):
		filename = Fp.dirName(filename);
	filename = filename.replace(/\.tea$/, '.js');
	return { card: token.clone('"'+filename+'"'), file:file};

function getName(text):
	if text:
		text = text.replace(/^['"]+|['"]+$|\.[^\.\/\\]*$|/g, '');
		var name = Fp.baseName(text);
		if name == 'index':
			name = Fp.baseName(Fp.dirName(text));
		name = name.replace(/(?:^|[^a-zA-Z0-9\$]+)(\w)/g, ($0, $1) => $1.toUpperCase());
		return name;
