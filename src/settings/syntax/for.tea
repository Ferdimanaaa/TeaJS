
Syntax = require "../../core/syntax";

var patt = `(; → | var∅ Argus@=VarPatt | let∅ Argus@=LetPatt | Argus@:InitPatt)
			(;∅ (;→ | Comma) ;∆1022∅ Comma? | [in of -> => <- <= ...] Comma ) |
			CommaExpr (... Comma)?`

module.exports = function(src, params):
	start_index = src.index;
	if src.current.text == '(':
		if !src.get( src.nextIndex( src.indexPair('(', ')', start_index)[1], true) ).is('JOINT'):
			ref = matchCondition(@, @.next(src, 1));
			if @.next(src, 1).current.text != ')':
				Err 1023, src.current;
	if !ref:
		ref = matchCondition(@, src );
	[exp1, exp2, exp3] = ref;
	if exp1 && !exp2 && !exp3:
		temp = exp1;
		do:
			if temp.is('CompareExpr') && temp[1] && temp[1].isToken && temp[1].text in ['<=', 'in', 'of', '...']:
				exp2 = temp[1];
				exp3 = temp[2];
				if temp == exp1:
					exp1 = temp[0];
				else:
					temp[0].parent = temp.parent;
					temp.parent[ -1 ] = temp[0];
				break;
		while temp = temp[-1];
	return new Syntax('ForCondition', exp1, exp2, exp3);

function matchCondition(grammar, src):
	if not ref = grammar.pattern(patt, src):
		Err 1022, src.current;
	return ref;


