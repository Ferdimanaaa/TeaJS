var Beautify = require "./beautify.js";

class Writer:

	constructor(reader, type):
		@.length = 0
		@.type   = type && type.type || type;
		@.reader = reader;
		@.iswriter = true

	get text:
		return @.listToText( Beautify(@) );

	get lastText:
		var last = @;
		while true:
			if last.istoken:
				return last.text;
			if last as 'string' || last as 'number':
				return last;
			if last = last[last.length-1]:
				continue;
			return null;
	
	insert (pos):
		var argus = [pos, 0];
		for i=1, item -> arguments:
			if item.istoken || item.isnode:
				item = @.reader.read(item);
			if item:
				if isArray(item):
					argus.push.apply( argus, item );
				else:
					argus.push( item );
		Array.prototype.splice.apply(@, argus);
		return @;

	add ():
		for i, item -> arguments:
			if item:
				@[@.length++] = item;
		return @;

	delete (a, b = a):
		Array::splice.call(@, a, b-a+1);
		return @;

	read (test_patt):
		if test_patt as 'string' && /#/.test(test_patt):
			@.reader.patt(test_patt, arguments[1], @);
		else:
			for i, item -> arguments:
				if !item:
					continue;
				if item.istoken || item.isnode:
					item = @.reader.read(item);
				else if isArray(item):
					@.read.apply(@, item);
					continue;
				if item:
					@[@.length++] = item;
		return @;

	toList( not_beautify ):
		if !not_beautify:
			return Beautify(@);
		var list = [];
		for item => @:
			!item -> continue;
			if item.iswriter:
				list.push.apply(list, item.toList( true ));
			else:
				list.push(item);
		return list;

	static listToText(list):
		var texts = [];
		for item => list:
			if item.istoken:
				texts.push(item.text);
			else if item.iswriter || isArray(item):
				texts.push( @.listToText(item) );
			else:
				texts.push(item);
		return texts.join('');

module.exports = Writer;